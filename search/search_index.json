{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Front Side Back Side","tags":["tag1","tag2"]},{"location":"#stem-cooling-system-project","title":"STEM Cooling System Project","text":"<p>Team Number: 303</p> <p>Team Members: Jahmel Garduno, Cade Clonts, Daniel Resnick</p> <p>Preperation Date: Febuary 23, 2025</p> <p>Semester and Year: Spring 2025</p> <p>University: Arizona State University </p> <p>Professor: K. Nichols </p>","tags":["tag1","tag2"]},{"location":"#team-role","title":"Team Role","text":"<p>My role in the team is to develop the human interface subsystem for displaying temperature and humidity data from the sensor. For this subsystem, I will be using the PIC18F27Q10-I/SO microcontroller along with the Songhe OLED Display provided in class. This display will present real-time temperature and humidity readings, allowing users to interact with the data. Additionally, I will implement button controls that enable users to navigate through different data points and select the specific information they want to view.</p> <p>To ensure seamless integration with the overall system, I will utilize a UART connection to send and receive data between the human interface subsystem and other components, including the sensor, actuator, and communication subsystems. My focus will be on maintaining efficient and responsive data transmission, ensuring that users receive accurate and timely environmental readings while enabling smooth interaction within the system.</p>","tags":["tag1","tag2"]},{"location":"#team-links","title":"Team Links","text":"Name Link Team Website link Cade Clonts link Daniel Resnick link","tags":["tag1","tag2"]},{"location":"Component%20Selection/","title":"Component Selection","text":""},{"location":"Component%20Selection/#title-component-selection","title":"title: Component Selection","text":""},{"location":"Component%20Selection/#microcontroller","title":"Microcontroller","text":"Solution Pros Cons  Solution 1 ESP32-S3-WROOM-1-N4 Cost: $2.95 Per Unit Link to Product - Faster Processing for complex tasks- Built in Wifi and Bluetooth 5 Connectivity- Larger memory storage - Higher Power Consumption- Complex Peripheral Management- Much more complex memory management  Solution 2 PIC18F27Q10-I/SO Cost: $1.31 Per Unit Link to Product - Simple and easy architecture to program- Multiple low power modes; overall low energy consumption- More Reliable for wired standalone subsystems - No built in wireless capabilities- Fewer advanced I/O options- Limited memory for advanced applications  Solution 3 PIC18F47Q10T-I/MP Cost: $1.74 Per Unit Link to Product - Faster Processing speed- Adjustable GPIO pins- 2 UART and 2 ICSP Pins - Slower processing speeds- No built in wifi or bluetooth modules- Requires complex PCB design for high frequency operation <p>Choice: Solution 2 - PIC18F27Q10-I/SO</p> <p>Rationale: The PIC18F27Q10-I/SO offers an excellent balance of versatility, functionality, and efficient use of board space. With a rich array of bidirectional I/O pins that support both digital and analog functions, along with configurable peripherals such as timers, communication interfaces, and the Peripheral Pin Select (PPS) feature, this module provides the flexibility needed to handle complex tasks and interface with various sensors and actuators. Additionally, the integration of low-power features and dedicated programming interfaces makes it ideal for projects requiring robust performance in energy-sensitive environments. This combination of features in a compact package ensures that the design is both scalable and cost-effective, meeting the project's performance and connectivity requirements without unnecessary complexity.</p>"},{"location":"Component%20Selection/#voltage-regulator","title":"Voltage Regulator","text":"Solution Pros Cons  Solution 1 LM2575WU Cost: $3.95 Per Unit Link to Product - High Efficiency- High heat protection- Prior use in class with through hole version - Switch frequency make noise- Limited Stock  Solution 2 TPS75133QPWPR Cost: $4.12 Per Unit Link to Product - High Efficiency- High Temperature Range - Switch frequency make noise- Low dropout Voltage- 5.5 V Max Input  Solution 3 RP509Z001D-E2-F Cost: $0.70 Per Unit Link to Product - High Efficiency- Very Inexpensive - Very Difficult Soldering- Low max Temp- 6.5 V Max Input <p>Choice: Solution 1 - LM2575WU </p> <p>Rationale: The LM2575WU was chosen as our voltage regulator due to its efficiency, reliability, and ease of integration in our power management system. As a step-down (buck) switching regulator, it efficiently converts higher input voltages, such as 9V, to a stable 3.3V output, ensuring optimal power delivery while minimizing heat dissipation compared to traditional linear regulators. With a wide input voltage range (4V to 40V) and a 1A output current capacity, it provides flexibility for various power sources and load conditions. Its internal frequency compensation, fixed 52kHz switching frequency, and minimal external component requirements simplify circuit design and reduce PCB space. Additionally, the integrated thermal shutdown and current limit protection enhance system safety and durability. Given our prior experience and familiarity with this regulator, its selection ensures a seamless and efficient voltage regulation solution for our project.</p>"},{"location":"Component%20Selection/#human-machine-interface-hmi","title":"Human Machine Interface (HMI)","text":"Solution Pros Cons  Solution 1 DIS09024P Cost: $40.63 Per Unit Link to Product - Open Source Graphics library- Peripheral rich (works with SPI, I2C, Arduino)- Only needs 5V DC - Most Expensive option- Only 2.4 Inches in size  Solution 2 Songhe 128x64 OLED Display Cost: $0.00 Per Unit Link to Product - Simple pin structure- Only needs 3.3V- Have prior knowledge of how to use - Has a slower processing speed- Only 0.96 in. in size  Solution 3 LCM-S01601DTR Cost: $11.25 Per Unit Link to Product - Runs I2C and SPI- Simple pin structure- Relatively Inexpensive - Only runs characters- Has no backlight <p>Choice: Solution 2 - Songhe 128x64 OLED Display</p> <p>Rationale: The Songhe OLED display was chosen for this project due to its high contrast, and ultra-low power consumption (0.06W), making it ideal for clear and efficient data visualization. Its I\u00b2C communication simplifies interfacing with microcontrollers, reducing wiring complexity, while the wide 3.3V-5V power range ensures flexibility. The self-luminous OLED technology eliminates the need for a backlight, improving readability and durability in various lighting conditions. Additionally, our prior experience with this display in class allows for seamless integration, minimizing troubleshooting time.</p>"},{"location":"Component%20Selection/#final-compnents-selected","title":"Final Compnents Selected","text":"Component Part Number Function Microcontroller PIC18F47Q10 Central control unit for UART, I2C, GPIO handling OLED Display SSD1306 Displays temperature and fan status over I2C Switching Regulator LM2575 Converts barrel jack input to 3.3V regulated supply Barrel Jack Connector PJ-102A Receives 12V power from wall outlet"},{"location":"Component%20Selection/#mcc-configuration","title":"MCC Configuration","text":""},{"location":"Component%20Selection/#pin-configuration-explanation","title":"Pin Configuration Explanation","text":"<p>This section explains the configured input/output pins for the PIC18F27Q10 microcontroller, including pushbuttons, debug LEDs, UART, and I2C interfaces.</p>"},{"location":"Component%20Selection/#input-pins-pushbuttons","title":"Input Pins (Pushbuttons)","text":"Pin Name Location Function Description RA3 5 GPIO (input) Connected to a pushbutton. Externally pulled high to default logic 1, and triggers an interrupt on negative edge (when pressed and pulled low). RC2 13 GPIO (input) Another pushbutton with the same pull-up behavior and negative edge interrupt configuration. <p>Note: Both buttons are active-low due to external pull-up resistors.</p>"},{"location":"Component%20Selection/#output-pins-debug-leds","title":"Output Pins (Debug LEDs)","text":"Pin Name Location Function Description RA6, RA7 10, 9 GPIO (output) Drive debug LEDs to indicate status or events. RB3, RB4, RB5 24, 25, 26 GPIO (output) Additional LED outputs for system feedback. RC0, RC1, RC5 11, 12, 16 GPIO (output) More LED channels used for debugging or visual indication. <p>All output pins have slew rate enabled to reduce EMI and improve signal integrity.</p>"},{"location":"Component%20Selection/#i2c-communication-pins-oled-display","title":"I2C Communication Pins (OLED Display)","text":"Pin Name Location Function Description RB1 (SCL1) 22 MSSP (I2C Clock) Connected to the SCL line of the SSD1306 OLED display. RB2 (SDA1) 23 MSSP (I2C Data) Connected to the SDA line of the OLED display. <p>These are bi-directional I2C lines used for communicating with the OLED.</p>"},{"location":"Component%20Selection/#uart-communication-pins-serial","title":"UART Communication Pins (Serial)","text":"Pin Name Location Function Description RC7 (RX1) 18 EUSART1 RX Receives UART messages (e.g., from a downstream subsystem). RC6 (TX1) 17 EUSART1 TX Sends UART messages (e.g., to an upstream subsystem). <p>Used for full-duplex serial communication with external modules.</p>"},{"location":"Component%20Selection/#power-budget","title":"Power Budget","text":""},{"location":"Component%20Selection/#all-major-components-absolute-maximum-current-draw","title":"All Major Components (Absolute Maximum Current Draw)","text":"<pre><code>| **Component Name**        | **Part Number**       | **Supply** | **#** | **Absolute (mA)** | **Total (mA)** | **Unit** |\n|---------------------------|------------------------|------------|------|-------------------|----------------|----------|\n| **PIC18F27Q10 MCU**       | PIC18F27Q10-I/SO       | **+3.3V**  | 1    | **50**            | **50**         | **mA**   |\n| **OLED Display**          | SSD1306                | **+3.3V**  | 1    | **25**            | **25**         | **mA**   |\n| **Green LEDs**            | Generic LED (Green)    | **+3.3V**  | 5    | **20**            | **100**        | **mA**   |\n| **Pull-up Resistors**     | 10k\u03a9 &amp; 4.7k\u03a9           | **+3.3V**  | 5    | **3.62**          | **3.62**       | **mA**   |\n</code></pre>"},{"location":"Component%20Selection/#33v-power-rail-absolute-maximum-current-draw","title":"+3.3V Power Rail (Absolute Maximum Current Draw)","text":"<pre><code>| **Component Name**        | **Part Number**       | **Supply** | **#** | **Absolute (mA)** | **Total (mA)** | **Unit** |\n|---------------------------|------------------------|------------|------|-------------------|----------------|----------|\n| **PIC18F27Q10 MCU**       | PIC18F27Q10-I/SO       | **+3.3V**  | 1    | **50**            | **50**         | **mA**   |\n| **OLED Display**          | SSD1306                | **+3.3V**  | 1    | **25**            | **25**         | **mA**   |\n| **Green LEDs**            | Generic LED (Green)    | **+3.3V**  | 5    | **20**            | **100**        | **mA**   |\n| **Pull-up Resistors**     | 10k\u03a9 &amp; 4.7k\u03a9           | **+3.3V**  | 5    | **3.62**          | **3.62**       | **mA**   |\n</code></pre> <ul> <li>Subtotal: 178.62mA</li> <li>Safety Margin (25%): +44.66mA</li> <li>Total Current Required on +3.3V Rail: 223.28mA</li> </ul>"},{"location":"Component%20Selection/#c4-regulator-or-source-choice-absolute-maximum-ratings","title":"c4. Regulator or Source Choice (Absolute Maximum Ratings)","text":"<pre><code>| **Regulator Name**        | **Supply Input** | **Output Voltage** | **Max Output Current** |\n|---------------------------|------------------|---------------------|--------------------------|\n| **LM2575WU (Buck Converter)** | **+12V**       | **+3.3V**           | **1A (1000mA)**         |\n</code></pre> <ul> <li>Total Remaining Current Available on +3.3V Rail: 776.72mA</li> </ul>"},{"location":"Component%20Selection/#external-power-source-1-absolute-maximum-ratings","title":"External Power Source 1 (Absolute Maximum Ratings)","text":"<pre><code>| **Power Source**            | **Part Number**       | **Input**     | **Output**     | **Absolute Current** | **Total Current (mA)** |\n|-----------------------------|------------------------|---------------|----------------|-----------------------|------------------------|\n| **Power Source Selection**  | Plug-in Wall Supply    | **110V AC**   | **+12V DC**    | **6000mA**            | **6000mA**             |\n| **Power Rails Connected**   | LM2575WU Regulator     | **+12V**      | **+3.3V**      | **1000mA**            | **1000mA**             |\n</code></pre> <ul> <li>Total Remaining Current Available on External Power Source 1: 5000mA</li> </ul> <p>Here's a polished and concise explanation you can use for your project documentation or website:</p>"},{"location":"Component%20Selection/#power-budget-reflection","title":"Power Budget Reflection","text":"<p>To estimate my system\u2019s power needs, I created a power budget table listing all major components along with their absolute maximum current draw, operating voltage, and quantity used. This allowed me to calculate the total current demand on the +3.3V power rail under worst-case conditions.</p> <p>The key steps included:</p> <ul> <li>Summing the individual current draws of the microcontroller, OLED display, 5 LEDs, and pull-up resistors.</li> <li>Applying a 25% safety margin to account for potential current spikes or expansion.</li> <li>Comparing the total estimated current with the maximum current output of the LM2575WU switching regulator.</li> </ul>"},{"location":"Component%20Selection/#conclusions","title":"Conclusions:","text":"<ul> <li>My total current draw, including the safety margin, is 223.28 mA, which is well within the 1A (1000 mA) capability of the LM2575WU.</li> <li>The external 12V wall supply provides more than enough input power, leaving over 5000 mA of unused capacity.</li> <li>The design is robust, reliable, and has enough power headroom to support future components or design modifications.</li> </ul> <p>This process ensured that the system is electrically stable and that the chosen regulator and power source are not operating near their limits, which helps improve reliability and thermal performance.</p>"},{"location":"Datasheets/","title":"PIC18F27Q10 Table/DataSheets","text":""},{"location":"Datasheets/#pic18f27q10-information-table","title":"PIC18F27Q10 Information Table","text":"PIC18F27Q10 Info Answer Comments Model PIC18F27Q10-I/SO Product Page URL MircoChip PIC18F27Q10-I/SO Datasheet URL Datasheet Found on Microchip.com PIC18F27Q10-I/SO supplemental data sheet Datasheet Has more details on using Uart PIC18F27Q10-I/SO supplemental data sheet Datasheet Has details on using SPI for debugging PIC18F27Q10-I/SO supplemental data sheet Datasheet Has details on chaning GPIO function Vendor Link Digikey Code Examples Link All Code Examples Unit Cost $1.31 Absolute Maximum Current for entire IC 200mA as found in datasheet Supply Voltage Range 1.8V / 3.3V / 5.5V Min/Nominal/ Max, as found in datasheet Maximum GPIO current(per pin) 25mA as found in datasheet Supports External Interrupts? Yes as found in datasheet Required Programming Hardware, Cost, URL Link as found in datasheet"},{"location":"Datasheets/#associated-pins","title":"Associated Pins","text":"Peripheral Availability Associated Pins UART Modules 2 modules Pins 17 (TX1), 18 (RX1), 27 (TX2), 28 (RX2) SPI Modules 2 modules Pins 14 (SCK1), 15 (SDI1), 16 (SDO1), 21 (SS2), 22 (SCK2), 23 (SDI2), 24 (SDO2), 26 (SS1) I2C Modules 2 modules Pins 14 (SCL1), 15 (SDA1), 22 (SCL2), 23 (SDA2) GPIO Pins 25 pins Pins 2-7, 9-13, 17-28 ADC Channels 10 channels Pins 2-7, 13, 25, 26, 27 PWM Outputs 3 outputs Pins 6, 7, 13 Power (VDD/GND) 2 VDD, 2 GND Pins 8 (GND), 19 (GND), 20 (VDD), 28 (VDD)"},{"location":"Datasheets/#datasheet-references","title":"Datasheet References","text":""},{"location":"Datasheets/#microcontroller","title":"Microcontroller","text":"PIC18F27Q10-I/SO Link Product Page URL Digikey PIC18F27Q10-I/SO Data Sheet URL Datasheet"},{"location":"Datasheets/#voltage-regulator","title":"Voltage Regulator","text":"LM2575WU Link Product Page URL Digikey LM2575WU Data Sheet URL Datasheet"},{"location":"Datasheets/#oled-display","title":"OLED Display","text":"Songhe 128x64 OLED Display Link Product Page URL Link Songhe 128x64 OLED Display Data Sheets"},{"location":"PIC18F47Q10T-IPT%20Table/","title":"HMI Subsystem API \u2014 Jahmel","text":"<p>This document defines the message structures used by the Human-Machine Interface (HMI) subsystem in our system architecture. It outlines both incoming and outgoing messages, conforming to the team-wide 64-byte protocol.</p> <p>Each message includes: - 2-byte prefix (<code>0x41</code>, <code>0x5a</code>) - 1-byte source ID - 1-byte destination ID - 1-byte message type - Message-specific data - Padding (<code>0x00</code>) up to byte 62 - 2-byte suffix (<code>0x59</code>, <code>0x42</code>)</p>"},{"location":"PIC18F47Q10T-IPT%20Table/#subsystem-address-table","title":"Subsystem Address Table","text":"Subsystem ID Address WiFi (Cade) 1 <code>0x01</code> HMI (Jahmel) 2 <code>0x02</code> Temp Sensor 3 <code>0x03</code> Fan Controller 4 <code>0x04</code> Broadcast 88 <code>0x58</code>"},{"location":"PIC18F47Q10T-IPT%20Table/#messages-received-by-hmi","title":"Messages Received by HMI","text":""},{"location":"PIC18F47Q10T-IPT%20Table/#temperature-reading-message-type-0x10","title":"Temperature Reading (Message Type: <code>0x10</code>)","text":"<p>The HMI receives temperature data from the Temperature Sensor.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 <code>uint8_t</code> 0x41 0x41 0x41 2 prefix_2 <code>uint8_t</code> 0x5a 0x5a 0x5a 3 source_id <code>uint8_t</code> 3 3 0x03 4 destination_id <code>uint8_t</code> 2 2 0x02 5 message_type <code>uint8_t</code> 0x10 0x10 0x10 6 temp_id <code>uint8_t</code> 1 255 0x01 7 status <code>uint8_t</code> 0 1 0x00 8 temp_data_integer <code>int8_t</code> -40 155 23 9 temp_data_fraction <code>uint8_t</code> 0 99 50 10\u201362 unused <code>uint8_t</code> 0x00 0x00 0x00 63 suffix_1 <code>uint8_t</code> 0x59 0x59 0x59 64 suffix_2 <code>uint8_t</code> 0x42 0x42 0x42"},{"location":"PIC18F47Q10T-IPT%20Table/#fan-system-status-message-type-0x30","title":"Fan System Status (Message Type: <code>0x30</code>)","text":"<p>The HMI receives status updates from the Fan Controller.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 <code>uint8_t</code> 0x41 0x41 0x41 2 prefix_2 <code>uint8_t</code> 0x5a 0x5a 0x5a 3 source_id <code>uint8_t</code> 4 4 0x04 4 destination_id <code>uint8_t</code> 2 2 0x02 5 message_type <code>uint8_t</code> 0x30 0x30 0x30 6 fan_id <code>uint8_t</code> 1 255 0x02 7 status <code>uint8_t</code> 0 1 0x00 8 fan_status_code <code>uint8_t</code> 0x00 0x01 0x00 9\u201362 unused <code>uint8_t</code> 0x00 0x00 0x00 63 suffix_1 <code>uint8_t</code> 0x59 0x59 0x59 64 suffix_2 <code>uint8_t</code> 0x42 0x42 0x42"},{"location":"PIC18F47Q10T-IPT%20Table/#messages-sent-by-hmi","title":"Messages Sent by HMI","text":""},{"location":"PIC18F47Q10T-IPT%20Table/#set-fan-speed-message-type-0x20","title":"Set Fan Speed (Message Type: <code>0x20</code>)","text":"<p>The HMI sends a command to the Fan Controller to adjust motor speed.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 <code>uint8_t</code> 0x41 0x41 0x41 2 prefix_2 <code>uint8_t</code> 0x5a 0x5a 0x5a 3 source_id <code>uint8_t</code> 2 2 0x02 4 destination_id <code>uint8_t</code> 4 4 0x04 5 message_type <code>uint8_t</code> 0x20 0x20 0x20 6 fan_id <code>uint8_t</code> 1 255 0x02 7 status <code>uint8_t</code> 0 1 0x01 8 fan_speed_set <code>uint8_t</code> 0 125 85 9\u201362 unused <code>uint8_t</code> 0x00 0x00 0x00 63 suffix_1 <code>uint8_t</code> 0x59 0x59 0x59 64 suffix_2 <code>uint8_t</code> 0x42 0x42 0x42"},{"location":"PIC18F47Q10T-IPT%20Table/#send-event-log-to-wifi-message-type-0x31","title":"Send Event Log to WiFi (Message Type: <code>0x31</code>)","text":"<p>The HMI logs user/system actions to the WiFi Module for storage.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 <code>uint8_t</code> 0x41 0x41 0x41 2 prefix_2 <code>uint8_t</code> 0x5a 0x5a 0x5a 3 source_id <code>uint8_t</code> 2 2 0x02 4 destination_id <code>uint8_t</code> 1 1 0x01 5 message_type <code>uint8_t</code> 0x31 0x31 0x31 6 event_type <code>uint8_t</code> 0 10 1 (fan change) 7 event_value <code>uint8_t</code> 0 255 85 8\u201362 unused <code>uint8_t</code> 0x00 0x00 0x00 63 suffix_1 <code>uint8_t</code> 0x59 0x59 0x59 64 suffix_2 <code>uint8_t</code> 0x42 0x42 0x42"},{"location":"PIC18F47Q10T-IPT%20Table/#notes","title":"Notes","text":"<ul> <li>All messages follow a 64-byte format with fixed prefix/suffix values.</li> <li>Message types are unique to each action.</li> <li>HMI must acknowledge valid messages and discard malformed or irrelevant ones.</li> <li>Confirm use of message type <code>0x31</code> with Cade for WiFi storage.</li> </ul> <p>wednesday_1.txt#include \"mcc_generated_files/system/system.h\"</p> <pre><code>\n#define MSG_PREFIX_1     0x41\n#define MSG_PREFIX_2     0x5A\n#define MSG_SUFFIX_1     0x59\n#define MSG_SUFFIX_2     0x42\n#define MSG_TOTAL_LEN    64\n\n#define ID_WIFI           0x01\n#define ID_HMI            0x02\n#define ID_FAN_CONTROL    0x03\n#define ID_TEMP_SENSOR    0x03\n#define ID_BROADCAST      0x58\n\n#define MSG_TYPE_FAN_CTRL  0x20\n#define MSG_TYPE_TEMP_DATA 0x10\n\nstatic uint8_t msg_buffer[MSG_TOTAL_LEN];\nstatic uint8_t msg_index = 0;\nstatic bool msg_receiving = false;\n\nvolatile uint8_t fan_speed = 0;\n\nvoid BlinkLED(uint8_t times)\n{\n    for (uint8_t i = 0; i &lt; times; i++)\n    {\n        IO_RC5_SetHigh();\n        __delay_ms(100);\n        IO_RC5_SetLow();\n        __delay_ms(100);\n    }\n}\n\nvoid SendFanSpeedBroadcast(uint8_t speed)\n{\n    uint8_t msg[64] = {0};\n\n    msg[0] = MSG_PREFIX_1;\n    msg[1] = MSG_PREFIX_2;\n    msg[2] = ID_HMI;\n    msg[3] = ID_BROADCAST;\n    msg[4] = MSG_TYPE_FAN_CTRL;\n    msg[5] = 0x02;  // fan_id\n    msg[6] = 0x01;  // status\n    msg[7] = speed; // fan_speed_data\n    msg[8] = speed; // fan_speed_set\n    msg[62] = MSG_SUFFIX_1;\n    msg[63] = MSG_SUFFIX_2;\n\n    for (uint8_t i = 0; i &lt; 64; i++)\n    {\n        while (!EUSART1_IsTxReady());\n        EUSART1_Write(msg[i]);\n    }\n}\n\nvoid CheckButtonAndBroadcast(void)\n{\n    static bool prev_state = true;\n    bool current_state = IO_RC2_GetValue();\n\n    if (prev_state == true &amp;&amp; current_state == false)\n    {\n        fan_speed++;\n        if (fan_speed &gt; 3) fan_speed = 1;\n        SendFanSpeedBroadcast(fan_speed);\n    }\n\n    prev_state = current_state;\n}\n\nvoid ForwardMessage(uint8_t* buffer)\n{\n    for (uint8_t i = 0; i &lt; MSG_TOTAL_LEN; i++)\n    {\n        while (!EUSART1_IsTxReady());\n        EUSART1_Write(buffer[i]);\n    }\n}\n\nvoid HandleFullMessage(uint8_t* buffer)\n{\n    if (buffer[0] != MSG_PREFIX_1 || buffer[1] != MSG_PREFIX_2 ||\n        buffer[62] != MSG_SUFFIX_1 || buffer[63] != MSG_SUFFIX_2)\n        return;\n\n    uint8_t src_id = buffer[2];\n    uint8_t dest_id = buffer[3];\n    uint8_t msg_type = buffer[4];\n\n    if (src_id != ID_WIFI &amp;&amp; src_id != ID_HMI &amp;&amp;\n        src_id != ID_FAN_CONTROL &amp;&amp; src_id != ID_BROADCAST &amp;&amp;\n        src_id != ID_TEMP_SENSOR)\n        return;\n\n    // Forward messages not meant for HMI or broadcast\n    if (dest_id != ID_HMI &amp;&amp; dest_id != ID_BROADCAST)\n    {\n        ForwardMessage(buffer);\n        return;\n    }\n\n    switch (src_id)\n    {\n        case ID_WIFI:        BlinkLED(1); break;\n        case ID_HMI:         BlinkLED(2); break;\n        case ID_FAN_CONTROL: BlinkLED(3); break;\n        case ID_BROADCAST:   BlinkLED(4); break;\n    }\n\n    if (msg_type == MSG_TYPE_TEMP_DATA &amp;&amp; src_id == ID_TEMP_SENSOR)\n    {\n        uint8_t status = buffer[6];\n        uint8_t raw_temp = buffer[7];\n        uint8_t temp_frac = buffer[8];\n\n        if (status == 1)\n        {\n            int8_t corrected_temp = (int8_t)raw_temp - 40;\n            float temperature = corrected_temp + (temp_frac / 100.0f);\n\n            if (corrected_temp &lt; 0)\n                BlinkLED(2);\n            else\n                BlinkLED(1);\n        }\n    }\n}\n\nvoid UART_MessageParser(void)\n{\n    if (EUSART1_IsRxReady())\n    {\n        uint8_t byte = EUSART1_Read();\n\n        if (!msg_receiving)\n        {\n            if (byte == MSG_PREFIX_1)\n            {\n                msg_buffer[0] = byte;\n                msg_index = 1;\n                msg_receiving = true;\n            }\n        }\n        else\n        {\n            msg_buffer[msg_index++] = byte;\n\n            if (msg_index == MSG_TOTAL_LEN)\n            {\n                HandleFullMessage(msg_buffer);\n                msg_receiving = false;\n                msg_index = 0;\n            }\n        }\n    }\n}\n\nvoid main(void)\n{\n    SYSTEM_Initialize();\n    INTERRUPT_GlobalInterruptEnable();\n    INTERRUPT_PeripheralInterruptEnable();\n\n    while (1)\n    {\n        UART_MessageParser();\n        CheckButtonAndBroadcast();\n    }\n}\n </code></pre>"},{"location":"charts/","title":"Block Diagram","text":""},{"location":"charts/#hmi-interface-block-diagram","title":"HMI Interface Block Diagram","text":"<p>[]</p>"},{"location":"charts/#decision-making-process-and-block-diagram-justification","title":"Decision-Making Process and Block Diagram Justification","text":"<p>I developed my block diagram by identifying and organizing all critical components and connections required for the functionality of my board. My goal was to clearly represent the system architecture, data flow, and how each subsystem interfaces with the microcontroller. The block diagram meets the project requirements by illustrating the following: UART Communication: It includes two UART header blocks that clearly indicate the direction of RX and TX lines for both upstream and downstream communication.</p> <p>I\u00b2C Interface: It shows the OLED display connected to the microcontroller via the SDA and SCL lines, fulfilling the display integration requirement.</p> <p>GPIO Inputs: Push buttons are connected to specific GPIO pins, with labeled functionality, demonstrating user input integration.</p> <p>Power Regulation: The diagram includes a switching regulator powered through a barrel jack connected to an external wall outlet, which satisfies the off-board power supply requirement.</p> <p>This layout ensures that all major subsystems are accounted for and that their communication and power pathways are transparent and logically organized to meet both functional and project constraints.</p>"},{"location":"second-page/","title":"Board Design","text":"<p>The schematic below details the Human Machine Interface (HMI) subsystem, ensuring fast real-time data display on the OLED screen from the sensor. This design incorporates several key sections, each serving a critical role in facilitating seamless data retrieval, processing, and visualization for the user.</p> <p>To support debugging and monitoring, the schematic includes a single debugging LED, providing a visual indicator for data transmission and system status. A reset button is integrated to facilitate system resets as needed. Additionally, dedicated headers are included to allow seamless connection with the Snap Debug Programmer, enabling efficient debugging and firmware updates.</p> <p>A 3.3V voltage regulator is incorporated to ensure a stable power supply for the HMI subsystem. This schematic is designed to meet user needs and project requirements by enabling real-time data display, supporting UART communication, and facilitating efficient system debugging through dedicated interfaces.</p>"},{"location":"second-page/#schematic","title":"Schematic","text":""},{"location":"second-page/#download-links","title":"Download Links","text":"<ul> <li>Download Schematic PDF</li> <li>Altium ZIP Folder</li> </ul>"},{"location":"second-page/#pcb-design","title":"PCB Design","text":"<p>coming soon</p>"},{"location":"second-page/#power-budget","title":"Power Budget","text":""},{"location":"second-page/#all-major-components-absolute-maximum-current-draw","title":"All Major Components (Absolute Maximum Current Draw)","text":"Component Name Part Number Supply # Absolute (mA) Total (mA) Unit PIC18F27Q10 MCU PIC18F27Q10-I/SO +3.3V 1 50 50 mA OLED Display SSD1306 +3.3V 1 25 25 mA Green LED Generic LED (Green) +3.3V 1 20 20 mA Pull-up Resistors 10k\u03a9 &amp; 4.7k\u03a9 +3.3V 5 3.62 3.62 mA"},{"location":"second-page/#33v-power-rail-absolute-maximum-current-draw","title":"+3.3V Power Rail (Absolute Maximum Current Draw)","text":"Component Name Part Number Supply # Absolute (mA) Total (mA) Unit PIC18F27Q10 MCU PIC18F27Q10-I/SO +3.3V 1 50 50 mA OLED Display SSD1306 +3.3V 1 25 25 mA Green LED Generic LED (Green) +3.3V 1 20 20 mA Pull-up Resistors 10k\u03a9 &amp; 4.7k\u03a9 +3.3V 5 3.62 3.62 mA <ul> <li>Subtotal: 98.62mA </li> <li>Safety Margin (25%): +24.66mA </li> <li>Total Current Required on +3.3V Rail: 123.28mA </li> </ul>"},{"location":"second-page/#c4-regulator-or-source-choice-absolute-maximum-ratings","title":"c4. Regulator or Source Choice (Absolute Maximum Ratings)","text":"Regulator Name Supply Input Output Voltage Max Output Current LM2575WU (Buck Converter) +12V +3.3V 1A (1000mA) <ul> <li>Total Remaining Current Available on +3.3V Rail: 876.72mA </li> </ul>"},{"location":"second-page/#external-power-source-1-absolute-maximum-ratings","title":"External Power Source 1 (Absolute Maximum Ratings)","text":"Power Source Part Number Input Output Absolute Current Total Current (mA) Power Source Selection Plug-in Wall Supply 110V AC +12V DC 6000mA 6000mA Power Rails Connected LM2575WU Regulator +12V +3.3V 1000mA 1000mA <ul> <li>Total Remaining Current Available on External Power Source 1: 5000mA </li> </ul>"},{"location":"second-page/#key-adjustments","title":"Key Adjustments:","text":"<ul> <li>PIC18F27Q10 Absolute Max Current: Updated from 10mA \u2192 50mA.</li> <li>OLED Display Absolute Max Current: Updated from 18mA \u2192 25mA.</li> <li>Total +3.3V Current Requirement Updated to include safety margin.</li> </ul> <p>This power budget accounts for absolute maximum current draws to ensure a robust and reliable power supply design.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is what should pop up","text":"<p>Things to discuss</p>"}]}